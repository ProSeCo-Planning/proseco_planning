"""To be used in conjunction with stateAnalysis.cpp. This file generates plots of the respective action classes given a specific vehicular state."""

import plotly.express as px
import pandas as pd
import json
import tool as tl
from typing import Tuple, Dict


def load_data() -> Tuple[Dict, pd.DataFrame]:
    """Loads the data generated by actionAnalysis.cpp.

    Returns:
        Tuple[dict, pd.DataFrame]: A tuple with the raw data and the normalized actions.
    """

    data = {}
    children = []
    with open(f"{tl.file_dir}/output/state_analysis.json") as json_data:
        data = json.load(json_data)

    for node in data["childMap"]:
        children.append(
            {
                "d_lateral": node[1]["action_set"][0]["lateral_change"],
                "d_velocity": node[1]["action_set"][0]["velocity_change"],
                "invalid": node[1]["invalid"],
                "collision": node[1]["collision"],
            }
        )
    actions = pd.DataFrame(children)

    return data, actions


def plot_state_analysis(vehicle: Dict, actions: pd.DataFrame) -> None:
    labels = {}
    labels["d_velocity"] = tl.l_math(r"\Delta v_\text{lon} [m/s]")
    labels["d_lateral"] = tl.l_math(r"\Delta y_\text{lat} [m]")
    labels["collision"] = "Collision State"
    labels["invalid"] = "Invalid State"

    for state in ["collision", "invalid"]:
        # stringify for coloring
        actions[state] = actions[state].astype(str)
        title = f"{labels[state]}"
        labels[state] = state.capitalize()
        fig = px.scatter(
            actions,
            x="d_velocity",
            y="d_lateral",
            hover_data=[state],
            title=title,
            labels=labels,
            width=600,
            height=600,
            color=state,
            color_discrete_map={"True": "red", "False": "green"},
        )
        fig.update_traces(marker=dict(size=12))
        fig.update_layout(
            xaxis=dict(tickmode="linear", tick0=min(actions["d_velocity"])),
            yaxis=dict(tickmode="linear", tick0=min(actions["d_lateral"])),
            font=dict(family=tl.font_family, size=tl.font_size),
            template=tl.theme_template
        )
        tl.generate_output(fig, f"state_analysis_{state}")


if __name__ == "__main__":
    # The tool to run.
    tool = "proseco_planning_tool_state_analysis"
    # The options file to load.
    options = "example_options.json"
    # The scenario file to load.
    scenario = "sc00.json"

    tl.create_output_dir()
    tl.run_tool(tool, options, scenario)
    data, actions = load_data()
    plot_state_analysis(data["agents"][0]["vehicle"], actions)
