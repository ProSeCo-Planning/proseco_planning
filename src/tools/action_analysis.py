"""To be used in conjunction with actionAnalysis.cpp. This file generates plots of the respective action classes given a specific vehicular state. In addition the cost associated with each action is plotted."""

import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from typing import Tuple
import tool as tl

def load_data() -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Loads the data generated by actionAnalysis.cpp.

    Returns:
        Tuple[pd.DataFrame, pd.DataFrame]: A tuple with the raw data and the normalized actions.
    """

    data = pd.io.json.read_json(f"{tl.file_dir}/output/action_analysis.json")
    actions = pd.json_normalize(data["actions"])
    actions = actions.rename(columns={"class": "a_class"})
    return data, actions


def plot_action_classes(data: pd.DataFrame, actions: pd.DataFrame) -> None:
    """Plots the action classes.

    Args:
        data (pd.DataFrame): The raw data from the tool.
        actions (pd.DataFrame): The actions data normaized.
    """
    title = f"Action Classes in the Action Space"
    x_axis_title = tl.l_math(r"\Delta v_\text{lon} [m/s]")
    y_axis_title = tl.l_math(r"\Delta y_\text{lat} [m]")

    fig = px.scatter(
        actions,
        x="d_lon_v",
        y="d_lat_y",
        color="a_class",
        hover_data=["a_class"],
        title=title,
        labels=dict(d_lon_v=x_axis_title, d_lat_y=y_axis_title, a_class="Class"),
        width=600,
        height=600,
    )
    fig.update_traces(marker=dict(size=12))
    fig.update_layout(
        xaxis=dict(tickmode="linear", tick0=min(actions["d_lon_v"])),
        yaxis=dict(tickmode="linear", tick0=min(actions["d_lat_y"])),
        font=dict(family=tl.font_family, size=tl.font_size),
        template=tl.theme_template
    )
    tl.generate_output(fig, "action_analysis")


def plot_action_costs(data: pd.DataFrame, actions: pd.DataFrame) -> None:
    """Plots the cost for the actions, i.e. acceleration for x and y direction, as well as the cost for changing the lane.

    Args:
        data (pd.DataFrame): The raw data from the tool.
        actions (pd.DataFrame): The actions data normaized.
    """
    labels = {}
    labels["d_lon_v"] = tl.l_math(r"\Delta v_\text{lon} [m/s]")
    labels["d_lat_y"] = tl.l_math(r"\Delta y_\text{lat} [m]")
    labels["cost_acc_x"] = "Cost Acceleration X"
    labels["cost_acc_y"] = "Cost Acceleration Y"
    labels["cost_change_lane"] = "Cost Lane Change"
    labels["cost_total"] = "Cost Total"

    for cost in ["cost_acc_x", "cost_acc_y", "cost_change_lane", "cost_total"]:
        title = f"{labels[cost]} using {data.cost_model[0]}"
        labels[cost] = "Cost"
        fig = px.scatter(
            actions,
            x="d_lon_v",
            y="d_lat_y",
            color=cost,
            hover_data=[cost],
            title=title,
            labels=labels,
            width=600,
            height=600,
        )
        fig.update_traces(marker=dict(size=12))
        fig.update_layout(
            xaxis=dict(tickmode="linear", tick0=min(actions["d_lon_v"])),
            yaxis=dict(tickmode="linear", tick0=min(actions["d_lat_y"])),
            font=dict(family=tl.font_family, size=tl.font_size),
            template=tl.theme_template
        )
        tl.generate_output(fig, f"cost_analysis_{cost}")

def plot_action_constraints(data: pd.DataFrame, actions: pd.DataFrame) -> None:
    """Plots the cost for the actions, i.e. acceleration for x and y direction, as well as the cost for changing the lane.

    Args:
        data (pd.DataFrame): The raw data from the tool.
        actions (pd.DataFrame): The actions data normaized.
    """
    labels = {}
    labels["d_lon_v"] = tl.l_math(r"\Delta v_\text{lon} [m/s]")
    labels["d_lat_y"] = tl.l_math(r"\Delta y_\text{lat} [m]")
    labels["maxTotalAcceleration"] = "Absolute Acceleration"
    labels["maxTotalVelocity"] = "Absolute Velocity"
    labels["maxAbsSteeringAngle"] = "Absolute Steering Angle"
    labels["invalid"] = "Invalid"

    for value in ["maxTotalAcceleration", "maxTotalVelocity", "maxAbsSteeringAngle", "invalid"]:
        title = f"{labels[value]}"
        labels[value] = "Value"
        fig = px.scatter(
            actions,
            x="d_lon_v",
            y="d_lat_y",
            color=value,
            hover_data=[value],
            title=title,
            labels=labels,
            width=600,
            height=600,
        )
        fig.update_traces(marker=dict(size=12))
        fig.update_layout(
            xaxis=dict(tickmode="linear", tick0=min(actions["d_lon_v"])),
            yaxis=dict(tickmode="linear", tick0=min(actions["d_lat_y"])),
            font=dict(family=tl.font_family, size=tl.font_size),
            template=tl.theme_template
        )
        tl.generate_output(fig, f"constraint_analysis_{value}")


def plot_action_costs_3d(data: pd.DataFrame, actions: pd.DataFrame) -> None:
    """Plots the cost for the actions, i.e. acceleration for x and y direction, as well as the cost for changing the lane.

    Args:
        data (pd.DataFrame): The raw data from the tool.
        actions (pd.DataFrame): The actions data normaized.
    """
    labels = {}
    labels["d_lon_v"] = tl.l_math(r"\Delta v_\text{lon} [m/s]")
    labels["d_lat_y"] = tl.l_math(r"\Delta y_\text{lat} [m]")
    labels["cost_acc_x"] = "Cost Acceleration X"
    labels["cost_acc_y"] = "Cost Acceleration Y"
    labels["cost_change_lane"] = "Cost Lane Change"
    labels["cost_total"] = "Cost Total"
    for cost in ["cost_acc_x", "cost_acc_y", "cost_change_lane", "cost_total"]:
        title = f"{labels[cost]} using {data.cost_model[0]}"
        labels[cost] = "Cost"
        contour = actions.pivot(index="d_lat_y", columns="d_lon_v", values=cost)
        fig = go.Figure(
            data=[
                go.Surface(
                    z=contour.values, x=contour.columns.values, y=contour.index.values
                )
            ]
        )
        fig.update_layout(
            title=title,
            autosize=True,
            width=600,
            height=600,
            scene=dict(
                xaxis_title=labels["d_lon_v"],
                yaxis_title=labels["d_lat_y"],
                zaxis_title="Cost",
            ),
            margin=dict(l=0, r=100, b=100, t=100),
            xaxis=dict(tickmode="linear", tick0=min(actions["d_lon_v"])),
            yaxis=dict(tickmode="linear", tick0=min(actions["d_lat_y"])),
            font=dict(family=tl.font_family, size=tl.font_size),
            template=tl.theme_template
        )
        tl.generate_output(fig, f"cost_analysis_3d{cost}")


if __name__ == "__main__":
    # The tool to run.
    tool = "proseco_planning_tool_action_analysis"
    # The options file to load.
    options = "example_options.json"
    # The scenario file to load.
    scenario = "sc00.json"

    tl.create_output_dir()
    tl.run_tool(tool, options, scenario)
    data, actions = load_data()
    plot_action_classes(data, actions)
    plot_action_costs(data, actions)
    plot_action_costs_3d(data, actions)
    plot_action_constraints(data, actions)